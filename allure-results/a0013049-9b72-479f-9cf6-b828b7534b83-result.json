{"name": "Тест: ввод почты и клик по кнопке «Восстановить»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60E81FB05+28789]\n\t(No symbol) [0x00007FF60E7886E0]\n\t(No symbol) [0x00007FF60E62592A]\n\t(No symbol) [0x00007FF60E5FF505]\n\t(No symbol) [0x00007FF60E6A6477]\n\t(No symbol) [0x00007FF60E6BEF42]\n\t(No symbol) [0x00007FF60E69F1E3]\n\t(No symbol) [0x00007FF60E66A938]\n\t(No symbol) [0x00007FF60E66BAA1]\n\tGetHandleVerifier [0x00007FF60EB5933D+3410093]\n\tGetHandleVerifier [0x00007FF60EB6E7DD+3497293]\n\tGetHandleVerifier [0x00007FF60EB62A73+3448803]\n\tGetHandleVerifier [0x00007FF60E8E7BBB+848171]\n\t(No symbol) [0x00007FF60E793C3F]\n\t(No symbol) [0x00007FF60E78F6E4]\n\t(No symbol) [0x00007FF60E78F87D]\n\t(No symbol) [0x00007FF60E77ED49]\n\tBaseThreadInitThunk [0x00007FFD25D07374+20]\n\tRtlUserThreadStart [0x00007FFD25F5CC91+33]", "trace": "self = <restore_password_test.TestRestorePassword object at 0x0000022121615D10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f18ce7f67e7ce71a874dac76a0aef134\")>\nrecover_password = <pages.login_page.ResetPassword object at 0x0000022121658C20>\ntest_user_create = {'email': 'r1927:1927@ya.ru', 'name': 'Username:1927', 'password': 'password:1927'}\n\n    @allure.title(\"Тест: ввод почты и клик по кнопке «Восстановить»\")\n    def test_open_reset_pass_page(self, driver, recover_password, test_user_create):\n        recover_password.click_on_login_to_account()\n        WebDriverWait(driver, 20).until(expected_conditions.element_to_be_clickable(login_page_login_button))\n        recover_password.click_on_recover_password_button()\n        recover_password.input_email_recover(test_user_create[\"email\"])\n        recover_password.click_recover_password_reset_button()\n>       WebDriverWait(driver, 20).until(expected_conditions.visibility_of_element_located(wait_order_number_modal))\n\ntests\\restore_password_test.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000221216581A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF60E77ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD25D07374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD25F5CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60E81FB05+28789]\nE       \t(No symbol) [0x00007FF60E7886E0]\nE       \t(No symbol) [0x00007FF60E62592A]\nE       \t(No symbol) [0x00007FF60E5FF505]\nE       \t(No symbol) [0x00007FF60E6A6477]\nE       \t(No symbol) [0x00007FF60E6BEF42]\nE       \t(No symbol) [0x00007FF60E69F1E3]\nE       \t(No symbol) [0x00007FF60E66A938]\nE       \t(No symbol) [0x00007FF60E66BAA1]\nE       \tGetHandleVerifier [0x00007FF60EB5933D+3410093]\nE       \tGetHandleVerifier [0x00007FF60EB6E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF60EB62A73+3448803]\nE       \tGetHandleVerifier [0x00007FF60E8E7BBB+848171]\nE       \t(No symbol) [0x00007FF60E793C3F]\nE       \t(No symbol) [0x00007FF60E78F6E4]\nE       \t(No symbol) [0x00007FF60E78F87D]\nE       \t(No symbol) [0x00007FF60E77ED49]\nE       \tBaseThreadInitThunk [0x00007FFD25D07374+20]\nE       \tRtlUserThreadStart [0x00007FFD25F5CC91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Клик по кнопке Войти в аккаунт", "status": "passed", "start": 1734731872994, "stop": 1734731873043}, {"name": "Клик по кнопке Восстановить пароль", "status": "passed", "start": 1734731873059, "stop": 1734731873096}, {"name": "Ввести почту в поле email", "status": "passed", "parameters": [{"name": "email", "value": "'r1927:1927@ya.ru'"}], "start": 1734731873097, "stop": 1734731873142}, {"name": "Клик по кнопке Восстановить", "status": "passed", "start": 1734731873143, "stop": 1734731873177}], "start": 1734731872994, "stop": 1734731881814, "uuid": "80f59e29-d1a0-4ae5-b048-1d6929681701", "historyId": "79cfc7485a0fd4718bbc5f98dc26963f", "testCaseId": "79cfc7485a0fd4718bbc5f98dc26963f", "fullName": "tests.restore_password_test.TestRestorePassword#test_open_reset_pass_page", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('recover_password')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "restore_password_test"}, {"name": "subSuite", "value": "TestRestorePassword"}, {"name": "host", "value": "DESKTOP-7LU8FN0"}, {"name": "thread", "value": "19820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.restore_password_test"}]}